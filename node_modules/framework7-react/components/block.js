function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
import React, { forwardRef, useRef, useImperativeHandle } from 'react';
import { classNames, getExtraAttrs } from '../shared/utils.js';
import { colorClasses } from '../shared/mixins.js';
import { useTab } from '../shared/use-tab.js';


const Block = /*#__PURE__*/forwardRef((props, ref) => {
  const {
    className,
    inset,
    insetIos,
    insetMd,
    xsmallInset,
    xsmallInsetIos,
    xsmallInsetMd,
    smallInset,
    smallInsetIos,
    smallInsetMd,
    mediumInset,
    mediumInsetIos,
    mediumInsetMd,
    largeInset,
    largeInsetIos,
    largeInsetMd,
    xlargeInset,
    xlargeInsetIos,
    xlargeInsetMd,
    strong,
    strongIos,
    strongMd,
    outline,
    outlineIos,
    outlineMd,
    accordionList,
    accordionOpposite,
    tabs,
    tab,
    tabActive,
    id,
    style,
    children
  } = props;
  const extraAttrs = getExtraAttrs(props);
  const elRef = useRef(null);
  useImperativeHandle(ref, () => ({
    el: elRef.current
  }));
  useTab(elRef, props);
  const classes = classNames(className, 'block', {
    inset,
    'inset-ios': insetIos,
    'inset-md': insetMd,
    'xsmall-inset': xsmallInset,
    'xsmall-inset-ios': xsmallInsetIos,
    'xsmall-inset-md': xsmallInsetMd,
    'small-inset': smallInset,
    'small-inset-ios': smallInsetIos,
    'small-inset-md': smallInsetMd,
    'medium-inset': mediumInset,
    'medium-inset-ios': mediumInsetIos,
    'medium-inset-md': mediumInsetMd,
    'large-inset': largeInset,
    'large-inset-ios': largeInsetIos,
    'large-inset-md': largeInsetMd,
    'xlarge-inset': xlargeInset,
    'xlarge-inset-ios': xlargeInsetIos,
    'xlarge-inset-md': xlargeInsetMd,
    'block-strong': strong,
    'block-strong-ios': strongIos,
    'block-strong-md': strongMd,
    'block-outline': outline,
    'block-outline-ios': outlineIos,
    'block-outline-md': outlineMd,
    'accordion-list': accordionList,
    'accordion-opposite': accordionOpposite,
    tabs,
    tab,
    'tab-active': tabActive
  }, colorClasses(props));
  return /*#__PURE__*/React.createElement("div", _extends({
    id: id,
    style: style,
    className: classes,
    ref: elRef
  }, extraAttrs), children);
});
Block.displayName = 'f7-block';
export default Block;